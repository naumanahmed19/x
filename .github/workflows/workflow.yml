# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "build" ]
  pull_request:
    branches: [ "build" ]

  # Allows you to run this workflow manually from the Actions tab
      # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      flutterVersion:
        description: 'Flutter Framework version'
        required: true
        default: '3.0.3'
      appName:
        description: 'App Name'
        required: true
        default: '' 
      appBundleId:
        description: 'Unique app bundle id'
        required: true
        default: '' 
      appIcon:
        description: 'Application Icon'
        required: true
        default: '' 
      appSplashIcon:
        description: 'Application Icon'
        required: true
        default: ''
      appSplashColor:
        description: 'Application Icon'
        required: true
        default: '#ffffff'  
      userEmail:
        description: 'User email where we need to send information for steps'
        required: true
      buildStatusCallBackUrl:
        description: 'Update a build status'
        required: true
      appBundleData:
        description: 'Update a build status'
        required: true  
      repo:
        description: 'repo details'
        required: true
        
        
      
      
jobs:
  build:
    runs-on: macos-latest

    steps:
    
    - uses: actions/checkout@v3
      with:
        repository: ${{fromJson(github.event.inputs.repo).repository}}
        token: ${{fromJson(github.event.inputs.repo).token}}
        ref: ${{fromJson(github.event.inputs.repo).ref}}
        
        
     # Clone bash files
    - name: Clone bash scripts
      run: |
        git clone https://github.com/naumanahmed19/x.git
        cd x
        ls
        
    - name: Create ENV
      run: |
        text="${{fromJson(github.event.inputs.repo).appEnv}}"
        echo "$text" >  .env
        cat .env
    
        
     #  Send email
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
        # Required mail server address:
        server_address: smtp.gmail.com
        # Required mail server port:
        server_port: 465
        # Optional (recommended): mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Optional (recommended) mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: xapp build started for ${{ github.event.inputs.appName }}
        # Required recipients' addresses:
        to: ${{ github.event.inputs.userEmail }}
        # Required sender full name (address can be skipped):
        from: xapp # <xapp@app.com>
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: true
        # Optional plain body:
        body: A build has been started for ${{ github.event.inputs.appName}}
   
   
    - name: Update Workflow Id
      uses: fjogeleit/http-request-action@v1
      with:
        url: '${{ github.event.inputs.buildStatusCallBackUrl }}'
        method: 'PATCH'
        customHeaders: '{"Content-Type": "application/json" , "Authorization": "Bearer ${{ secrets.XAPP_TOKEN }}"}'
        data: '{"workflowId": "${{ github.run_id }}"}'
        


    - uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        architecture: x64
    - run: flutter clean
    - run: flutter pub get
  
    - name: Copy Assets from Url
      run: |
        curl -o assets/images/splash.png '${{ github.event.inputs.appSplashIcon }}'
        curl -o assets/images/icon.png '${{ github.event.inputs.appIcon }}'
        
    - name: Crate splash & Icon files & Env
      shell: bash
      run: |
        chmod +x ./x/bash-script.sh
        param1=${{ github.event.inputs.appSplashColor }}
        ./x/bash-script.sh "${param1}"
         
    - name: Update Splash & Icon
      id: update_splash
      run: |    
        flutter pub run flutter_native_splash:create f flutter_native_splash.yaml
        flutter pub run flutter_launcher_icons:main f flutter_launcher_icons.yaml
        echo ourerror: ${{steps.update_splash.outcome }}
        
    # Rename
    - name: Update App Name and Package
      run: |
        flutter pub run rename --bundleId '${{ github.event.inputs.appBundleId }}'
        flutter pub run rename --appname '${{ github.event.inputs.appName }}'
        
      
     
    # Firebase Settings Update
    - name: Firebase Settings Update
      env:
        fb : "${{fromJson(github.event.inputs.appBundleData).googleService}}"
      run: |
        echo "$fb" > ./ios/Runner/GoogleService-Info.plist
        cat ./ios/Runner/GoogleService-Info.plist
        

    - name: See files
      run: |
        ls
        rm -rf .git
    
    - name: Push
      uses: s0/git-publish-subdir-action@develop
      env:
        REPO:  git@github.com:naumanahmed19/mybrand-flutter.git
        BRANCH: build # The branch name where you want to push the assets
        FOLDER: . # The directory where your assets are generated
        SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
        MESSAGE: "Build: ${{ github.event.inputs.appName }} - ({sha}) {msg}" # The commit message
        
        
    ########################################################################################    
    #"${{fromJson(github.event.inputs.appBundleData).googleService}}"
    
      # Install the Apple certificate and provisioning profile 
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: "${{fromJson(github.event.inputs.appBundleData).p12Base64}}"
        P12_PASSWORD: "${{fromJson(github.event.inputs.appBundleData).p12Password}}"
        BUILD_PROVISION_PROFILE_BASE64: "${{fromJson(github.event.inputs.appBundleData).provisioningCertBase64}}"
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
     
     
    - name: Install the Apple certificate and provisioning profile
       run:|
          ls ~/Library/MobileDevice/Provisioning\
          ls ~/Library/MobileDevice/Provisioning\ Profiles/
          openssl smime -in ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision -inform der -verify -noverify |  grep -A 2 -a TeamIdentifier | grep "string" | sed -E "s/.*>([^<]*)<.*/\1/g"
          TEAM_IDENTIFIER=openssl smime -in ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision -inform der -verify -noverify |  grep -A 2 -a TeamIdentifier | grep "string" | sed -E "s/.*>([^<]*)<.*/\1/g"
          echo -n "$TEAM_IDENTIFIER"  


    # Build and sign the ipa using a single flutter command
    - name: Building IPA
      run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

    # Collect the file and upload as artifact         
    - name: collect ipa artifacts
      uses: actions/upload-artifact@v2
      with:
       name: release-ipa
       # Path to the release files
       path: build/ios/ipa/*.ipa

    # Important! Cleanup: remove the certificate and provisioning profile from the runner!
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
          
     #-----------------------------------------------------------------------------------     
   
        
            
    #  Send email
    - name: Send mail
      if: steps.build.outcome == 'failure'
      uses: dawidd6/action-send-mail@v3
      with:
        # Required mail server address:
        server_address: smtp.gmail.com
        # Required mail server port:
        server_port: 465
        # Optional (recommended): mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Optional (recommended) mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: xapp build failed for ${{ github.event.inputs.appName }}
        # Required recipients' addresses:
        to: ${{ github.event.inputs.userEmail }}
        # Required sender full name (address can be skipped):
        from: Xapp # <Xapp@app.com>
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: true
        # Optional plain body:
        body: Build faild! 
        
    
        
    #create zip
    
    - name: Create app downlaoadable zip
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r app.zip ./build/app/outputs/flutter-apk
    
  
    #upload
    - uses: shallwefootball/s3-upload-action@master
      name: Upload to S3
      id: S3
      with:
        aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_bucket: ${{ secrets.AWS_BUCKET }}
        source_dir: './build/app/outputs/flutter-apk'
  
    # Show results
    - name: s3 results
      run: echo ${{steps.S3.outputs.object_key}},  ${{steps.S3.outputs.object_locations}}
      
      
      
    - name: Update Build Status with files
      uses: fjogeleit/http-request-action@v1
      with:
        url: '${{ github.event.inputs.buildStatusCallBackUrl }}'
        method: 'PATCH'
        customHeaders: '{"Content-Type": "application/json" , "Authorization": "Bearer ${{ secrets.XAPP_TOKEN }}"}'
        data: '{"status": "success","workflowId": "${{ github.run_id }}" , "files": ${{ steps.S3.outputs.object_locations}} }'

     
     #  Send email
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
        # Required mail server address:
        server_address: smtp.gmail.com
        # Required mail server port:
        server_port: 465
        # Optional (recommended): mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Optional (recommended) mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: XAPP - Build Completed for ${{ github.event.inputs.appName }}
        # Required recipients' addresses:
        to: ${{ github.event.inputs.userEmail }}
        # Required sender full name (address can be skipped):
        from: Xapp # <Xapp@app.com>
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: true
        # Optional plain body:
        body: Build completed successfully! please download your app from ${{steps.S3.outputs.object_locations}}
        
        
    - name: If workflow fails
      uses: fjogeleit/http-request-action@v1
      if: ${{ failure() || cancelled() }} 
      with:
        url: '${{ github.event.inputs.buildStatusCallBackUrl }}'
        method: 'PATCH'
        customHeaders: '{"Content-Type": "application/json" , "Authorization": "Bearer ${{ secrets.XAPP_TOKEN }}"}'
        data: '{"status": "failed","workflowId": "${{ github.run_id }}"}'
