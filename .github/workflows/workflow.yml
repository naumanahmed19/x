# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "build" ]
  pull_request:
    branches: [ "build" ]

  # Allows you to run this workflow manually from the Actions tab
      # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      github:
        description: 'Item Reo'
        required: true
      
      
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      inputs: ${{ toJson(github.event.inputs.github ) }}
    

    steps:
    - run: |
        echo ${{fromJson(github.event.inputs.github).appBundleId}}
        echo ${{env.inputs.appName}}

        
    - uses: actions/checkout@master
      with:
        repository: naumanahmed19/mybrand-flutter
        token: ${{ secrets.token }}
        ref: android
        
     #  Send email
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
        # Required mail server address:
        server_address: smtp.gmail.com
        # Required mail server port:
        server_port: 465
        # Optional (recommended): mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Optional (recommended) mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: xapp build started for ${{ env.inputs.appName }}
        # Required recipients' addresses:
        to: ${{fromJson(github.event.inputs.github).userEmail}}
        # Required sender full name (address can be skipped):
        from: xapp # <xapp@app.com>
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: true
        # Optional plain body:
        body: A build has been started for ${{ github.event.inputs.appName}}
   
   
    - name: Update Workflow Id
      uses: fjogeleit/http-request-action@v1
      with:
        url: '${{ github.event.inputs.buildStatusCallBackUrl }}'
        method: 'PATCH'
        customHeaders: '{"Content-Type": "application/json" , "Authorization": "Bearer ${{ secrets.XAPP_TOKEN }}"}'
        data: '{"workflowId": "${{ github.run_id }}"}'
        

    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - uses: subosito/flutter-action@v2.2.0
      with:
        flutter-version: '${{ github.event.inputs.flutter_version }}'
    - run: flutter clean
    - run: flutter pub get

    
    - name: Copy Assets from Url
      run: |
        curl -o assets/images/splash.png '${{ github.event.inputs.appSplashIcon }}'
        curl -o assets/images/icon.png '${{ github.event.inputs.appIcon }}'
        
    - name: Crate splash & Icon files
      shell: bash
      run: |
        chmod +x ./bash-script.sh
        param1=${{ github.event.inputs.appSplashColor }}
        ./bash-script.sh "${param1}"
         
    - name: Update Splash & Icon
      id: update_splash
      run: |    
        flutter pub run flutter_native_splash:create f flutter_native_splash.yaml
        flutter pub run flutter_launcher_icons:main f flutter_launcher_icons.yaml
        echo ourerror: ${{steps.update_splash.outcome }}
        
    # Rename
    - name: Update App Name and Package
      run: |
        flutter pub run rename --bundleId '${{ github.event.inputs.appBundleId }}'
        flutter pub run rename --appname '${{ github.event.inputs.appName }}'
    - name: Build App
      id: build
      continue-on-error: true
      run: |
        flutter build apk --split-per-abi
            
    #  Send email
    - name: Send mail
      if: steps.build.outcome == 'failure'
      uses: dawidd6/action-send-mail@v3
      with:
        # Required mail server address:
        server_address: smtp.gmail.com
        # Required mail server port:
        server_port: 465
        # Optional (recommended): mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Optional (recommended) mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: XAPP - Build failed for ${{ fromJson(github.event.inputs.github).appName }}
        # Required recipients' addresses:
        to: ${{ fromJson(github.event.inputs.github).userEmail }}
        # Required sender full name (address can be skipped):
        from: Xapp # <Xapp@app.com>
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: true
        # Optional plain body:
        body: Build faild! 
        
    
    #create zip
    
    - name: Create app downlaoadable zip
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r app.zip ./build/app/outputs/flutter-apk
    
  
    
      
    #upload
    - uses: shallwefootball/s3-upload-action@master
      name: Upload to S3
      id: S3
      with:
        aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_bucket: ${{ secrets.AWS_BUCKET }}
        source_dir: './build/app/outputs/flutter-apk'

    # Show results
    - name: s3 results
      run: echo ${{steps.S3.outputs.object_key}},  ${{steps.S3.outputs.object_locations}}
      
      
      
    - name: Update Build Status with files
      uses: fjogeleit/http-request-action@v1
      with:
        url: '${{ github.event.inputs.buildStatusCallBackUrl }}'
        method: 'PATCH'
        customHeaders: '{"Content-Type": "application/json" , "Authorization": "Bearer ${{ secrets.XAPP_TOKEN }}"}'
        data: '{"status": "success","workflowId": "${{ github.run_id }}" , "files": ${{ steps.S3.outputs.object_locations}} }'

     
     #  Send email
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
        # Required mail server address:
        server_address: smtp.gmail.com
        # Required mail server port:
        server_port: 465
        # Optional (recommended): mail server username:
        username: ${{secrets.MAIL_USERNAME}}
        # Optional (recommended) mail server password:
        password: ${{secrets.MAIL_PASSWORD}}
        # Required mail subject:
        subject: XAPP - Build Completed for ${{ github.event.inputs.appName }}
        # Required recipients' addresses:
        to: ${{ github.event.inputs.userEmail }}
        # Required sender full name (address can be skipped):
        from: Xapp # <Xapp@app.com>
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: true
        # Optional plain body:
        body: Build completed successfully! please download your app from ${{steps.S3.outputs.object_locations}}
        
        
    - name: If workflow fails
      uses: fjogeleit/http-request-action@v1
      if: failure()
      with:
        url: '${{ github.event.inputs.buildStatusCallBackUrl }}'
        method: 'PATCH'
        customHeaders: '{"Content-Type": "application/json" , "Authorization": "Bearer ${{ secrets.XAPP_TOKEN }}"}'
        data: '{"status": "failed","workflowId": "${{ github.run_id }}"}'
